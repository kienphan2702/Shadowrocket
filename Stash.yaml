proxy-providers: {}
proxies: []
proxy-groups:
  - name: YouTube
    type: select
    proxies:
      - DIRECT
  - name: Revenuecat
    type: select
    proxies:
      - DIRECT

# HTTP engine
http:
  mitm:
    - redirector*.googlevideo.com
    - "*.googlevideo.com"
    - "www.youtube.com"
    - "s.youtube.com"
    - "youtubei.googleapis.com"
    - "api.revenuecat.com"
    - "buy.itunes.apple.com"

  script:
    # 1. Script YouTube Premium
    - match: ^https?:\/\/youtubei\.googleapis\.com\/youtubei\/(v\d+\/)?(player|browse|next|search|reel\/reel_watch_sequence|guide|account\/get_setting|get_watch)
      name: YouTubeNoAds
      type: response
      require-body: true
      binary-mode: true
      timeout: 10

    # 2. Script Revenuecat
    - match: ^https:\/\/api\.revenuecat\.com\/.+\/(receipts$|subscribers\/[^/]+$)
      name: Revenuecat1
      type: request
      require-body: true
      timeout: 10
      script: |
        // revenuecat-stash.js â€” Stash compatible
        export default async function (request, response) {
          const ua = request.headers["User-Agent"] || request.headers["user-agent"] || "";
          const list = {
            "VSCO": { name: "membership", id: "com.circles.fin.premium.yearly" },
            "1Blocker": { name: "premium", id: "blocker.ios.subscription.yearly" },
            "Anybox": { name: "pro", id: "cc.anybox.Anybox.annual" },
            "Fileball": { name: "filebox_pro", id: "com.premium.yearly" },
            "ipTV": { name: "ipTV +", id: "iptv_9.99_1y_7d_free" },
            "APTV": { name: "pro", id: "com.kimen.aptvpro.lifetime" },
            "Blink": { name: "pro", id: "blink_shell_plus_1y_1999" },
            "mizframa": { name: "premium", id: "mf_20_lifetime2" },
            "CallRecorder": { name: "subscriptions", id: "com.prettyboa.CallRecorder.MonthlySubscription2999" },
            "Locket": { name: "Gold", id: "locket_399_1m_only" },
            "Currency": { name: "plus", id: "com.jeffreygrossman.currencyapp.iap.plus" },
            "Forza Football": { name: "Forza Legend", id: "com.forzafootball.subscription.discounted_monthly" },
            "IPCams": { name: "family", id: "ipcams_pro_plus_yearly" },
            "Widgetsmith": { name: "Premium", id: "PremiumAnnualWidget" },
            "World Clock": { name: "lifetime-unlock", id: "com.overdesigned.worldclock.removeads1" },
            "Photomator": { name: "pixelmator_photo_pro_access", id: "pixelmator_photo_yearly_v1" },
            "StepsApp": { name: "stepsapp_pedometer_premium_1_year", id: "app.steps.stepsapp.premium.yearTrial.tier1" },
            "PhotoRoom": { name: "business", id: "com.background.business.yearly" },
            "Planny": { name: "premium", id: "com.kevinreutter.Sagittarius.PremiumLifetime" },
            "NextMatch": { name: "Pro", id: "nm_monthly" },
            "Splyt": { name: "Pro", id: "splyt_plus_3999_1y" },
            "Barcodes": { name: "Unlimited", id: "com.barcodesapp.lifetime" },
            "Scanner Pro": { name: "plus", id: "com.readdle.Scanner.subscription.year30" },
            "Pandora": { name: "$rc_annual", id: "com.ziheng.pandora.yearly" },
            "Mojo": { name: "pro", id: "video.mojo.pro.yearly" },
            "Color Widget": { name: "pro", id: "cw_1999_1y_3d0" },
            "HoursTracker": { name: "Unlimited", id: "hourstracker_unlimited_4799_1y_1w0" },
            "Sono": { name: "Premium", id: "sono_1y_2w0" },
            "Hours Tracker": { name: "PURCHASED", id: "com.appostrophe.hourstracker.subscription.premium_yearly_2999" },
            "Electrical": { name: "PURCHASED", id: "electricalcalculations.pro.lifetime" },
            "Binsoo": { name: "annual", id: "$RCAnonymousID:2d4482fc40b140f8be9045943614edac" },
            "FotMob": { name: "FotMob+", id: "fotmob_membership_1y" },
            "Paste Keyboard": { name: "$rc_lifetime", id: "com.tmsaeapp.copypastekeyboard.removeads" }
          };

          const data = {
            "expires_date": "2099-09-09T07:52:54Z",
            "original_purchase_date": "2002-02-27T07:52:55Z",
            "purchase_date": "2020-02-27T07:52:54Z",
            "request_date": "2020-02-27T07:52:54Z"
          };

          if (!response) {
            delete request.headers["x-revenuecat-etag"];
            delete request.headers["X-RevenueCat-ETag"];
            return { request };
          }

          if (response && response.body) {
            try {
              const obj = JSON.parse(response.body);
              if (obj.subscriber) {
                obj.subscriber.subscriptions = obj.subscriber.subscriptions || {};
                obj.subscriber.entitlements = obj.subscriber.entitlements || {};
                for (const key in list) {
                  if (new RegExp(`^${key}`, "i").test(ua)) {
                    obj.subscriber.subscriptions[list[key].id] = data;
                    obj.subscriber.entitlements[list[key].name] = { ...data, product_identifier: list[key].id };
                    break;
                  }
                }
                response.body = JSON.stringify(obj)
                  .replace(/"expires_date":"\w{4}/g, '"expires_date":"9999')
                  .replace(/"period_type":"\w+"/g, '"period_type":"active"');
              }
            } catch (err) {
              console.log("RevenueCat parse error:", err);
            }
          }

          return { response };
        }

    - match: ^https?:\/\/api\.revenuecat\.com\/v\d\/(receipts|subscribers)\/
      type: response
      require-body: true
      timeout: 10
      script: |
export default async function (request, response) {
          const ua = request.headers["User-Agent"] || request.headers["user-agent"] || "";
          const list = {
            "VSCO": { name: "membership", id: "com.circles.fin.premium.yearly" },
            "1Blocker": { name: "premium", id: "blocker.ios.subscription.yearly" },
            "Anybox": { name: "pro", id: "cc.anybox.Anybox.annual" },
            "Fileball": { name: "filebox_pro", id: "com.premium.yearly" },
            "ipTV": { name: "ipTV +", id: "iptv_9.99_1y_7d_free" },
            "APTV": { name: "pro", id: "com.kimen.aptvpro.lifetime" },
            "Blink": { name: "pro", id: "blink_shell_plus_1y_1999" },
            "mizframa": { name: "premium", id: "mf_20_lifetime2" },
            "CallRecorder": { name: "subscriptions", id: "com.prettyboa.CallRecorder.MonthlySubscription2999" },
            "Locket": { name: "Gold", id: "locket_399_1m_only" },
            "Currency": { name: "plus", id: "com.jeffreygrossman.currencyapp.iap.plus" },
            "Forza Football": { name: "Forza Legend", id: "com.forzafootball.subscription.discounted_monthly" },
            "IPCams": { name: "family", id: "ipcams_pro_plus_yearly" },
            "Widgetsmith": { name: "Premium", id: "PremiumAnnualWidget" },
            "World Clock": { name: "lifetime-unlock", id: "com.overdesigned.worldclock.removeads1" },
            "Photomator": { name: "pixelmator_photo_pro_access", id: "pixelmator_photo_yearly_v1" },
            "StepsApp": { name: "stepsapp_pedometer_premium_1_year", id: "app.steps.stepsapp.premium.yearTrial.tier1" },
            "PhotoRoom": { name: "business", id: "com.background.business.yearly" },
            "Planny": { name: "premium", id: "com.kevinreutter.Sagittarius.PremiumLifetime" },
            "NextMatch": { name: "Pro", id: "nm_monthly" },
            "Splyt": { name: "Pro", id: "splyt_plus_3999_1y" },
            "Barcodes": { name: "Unlimited", id: "com.barcodesapp.lifetime" },
            "Scanner Pro": { name: "plus", id: "com.readdle.Scanner.subscription.year30" },
            "Pandora": { name: "$rc_annual", id: "com.ziheng.pandora.yearly" },
            "Mojo": { name: "pro", id: "video.mojo.pro.yearly" },
            "Color Widget": { name: "pro", id: "cw_1999_1y_3d0" },
            "HoursTracker": { name: "Unlimited", id: "hourstracker_unlimited_4799_1y_1w0" },
            "Sono": { name: "Premium", id: "sono_1y_2w0" },
            "Hours Tracker": { name: "PURCHASED", id: "com.appostrophe.hourstracker.subscription.premium_yearly_2999" },
            "Electrical": { name: "PURCHASED", id: "electricalcalculations.pro.lifetime" },
            "Binsoo": { name: "annual", id: "$RCAnonymousID:2d4482fc40b140f8be9045943614edac" },
            "FotMob": { name: "FotMob+", id: "fotmob_membership_1y" },
            "Paste Keyboard": { name: "$rc_lifetime", id: "com.tmsaeapp.copypastekeyboard.removeads" }
          };

          const data = {
            "expires_date": "2099-09-09T07:52:54Z",
            "original_purchase_date": "2002-02-27T07:52:55Z",
            "purchase_date": "2020-02-27T07:52:54Z",
            "request_date": "2020-02-27T07:52:54Z"
          };

          if (!response) {
            delete request.headers["x-revenuecat-etag"];
            delete request.headers["X-RevenueCat-ETag"];
            return { request };
          }

          if (response && response.body) {
            try {
              const obj = JSON.parse(response.body);
              if (obj.subscriber) {
                obj.subscriber.subscriptions = obj.subscriber.subscriptions || {};
                obj.subscriber.entitlements = obj.subscriber.entitlements || {};
                for (const key in list) {
                  if (new RegExp(`^${key}`, "i").test(ua)) {
                    obj.subscriber.subscriptions[list[key].id] = data;
                    obj.subscriber.entitlements[list[key].name] = { ...data, product_identifier: list[key].id };
                    break;
                  }
                }
                response.body = JSON.stringify(obj)
                  .replace(/"expires_date":"\w{4}/g, '"expires_date":"9999')
                  .replace(/"period_type":"\w+"/g, '"period_type":"active"');
              }
            } catch (err) {
              console.log("RevenueCat parse error:", err);
            }
          }

          return { response };
        }
        
    # 3. DeleteHeaderRevenueCat
    - match: https://api.revenuecat.com/v1/(receipts|subscribers)/*
      name: DeleteHeader
      type: response
      require-body: true
      timeout: 10
      
    # 4. OldRoll
    - match: ^https?:\/\/buy\.itunes\.apple\.com\/verifyReceipt$
      name: OldRoll1
      type: response
      require-body: true
      timeout: 10

  rewrite:
    - '(^https?:\/\/[\w-]+\.googlevideo\.com\/(?!dclk_video_ads).+?)&ctier=L(&.+?),ctier,(.+) $1$2$3 302'
    - '^https?:\/\/[\w-]+\.googlevideo\.com\/(?!(dclk_video_ads|videoplayback\?)).+&oad - reject-200'
    - '^https?:\/\/(www|s)\.youtube\.com\/api\/stats\/ads - reject-200'
    - '^https?:\/\/(www|s)\.youtube\.com\/(pagead|ptracking) - reject-200'
    - '^https?:\/\/s\.youtube\.com\/api\/stats\/qoe\?adcontext - reject-200'

script-providers:
  YouTubeNoAds:
    url: https://raw.githubusercontent.com/Maasea/sgmodule/master/Script/Youtube/youtube.response.js
    interval: 86400
  Revenuecat1:
    url: https://raw.githubusercontent.com/kienphan2702/Shadowrocket/main/Javascript/revenuecat.js
    interval: 86400
  DeleteHeader:
    url: https://raw.githubusercontent.com/ddgksf2013/Scripts/master/deleteHeader.js
    interval: 1
  OldRoll1:
    url: https://raw.githubusercontent.com/yqc007/QuantumultX/master/OldRollFVIPCrack.js
    interval: 86400

rules:
  - GEOSITE,youtube,YouTube
  - MATCH,Revenuecat1

dns:
  default-nameserver:
    - 114.114.114.114
    - 1.1.1.1
  skip-cert-verify: true
  nameserver:

log-level: info
mode: rule
